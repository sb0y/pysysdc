trigger:
  - testing
  - beta
  - dev
  - develop

pool:
 name: DC Box Build Fabric
 demands: Agent.Name -equals 20

variables:
  # Enable for debugging pipeline
  # system.debug: True

  ${{ if eq(variables['Build.SourceBranchName'], 'release') }}:
    branchType: RELEASE
  ${{ if eq(variables['Build.SourceBranchName'], 'rc') }}:
    branchType: RC
  ${{ if eq(variables['Build.SourceBranchName'], 'testing') }}:
    branchType: TESTING
  ${{ if contains(variables['Build.SourceBranchName'], 'dev') }}:
    branchType: DEVELOP
  ${{ if contains(variables['Build.SourceBranchName'], 'beta') }}:
    branchType: BETA

  GIT_COMMIT_HASH: $(Build.SourceVersion)

  GIT_COMMIT: $(Build.SourceVersion)
  GIT_BRANCH: $(Build.SourceBranchName)

  major: 2
  minor: 0
  semver: $(major).$(minor)

  AUTHOR: "Andrey Bagrintsev"
  EMAIL: "a.bagrintsev@petrosoftinc.com"
  PACKAGE_NAME: "pysysdc"

stages:

# Versioning for testing and release branch builds

  - stage:
    displayName: Build_Master_Version_Number
    condition: or
     (
         eq(variables['Build.SourceBranch'], 'refs/heads/master'),
         eq(variables['Build.SourceBranch'], 'refs/heads/release')
     )
    jobs:
    - job: Build_Master_Version_Number
      variables:
        patch: $[counter(variables['minor'], 0)]
      steps:
      - bash: |
             echo "##vso[build.updatebuildnumber]$(major).$(minor).$(patch)-$(Build.BuildID)"
        name: SetMasterBuildName


# Versioning dev branch builds
  - stage:
    displayName: 'Build Version Number'
    condition: |
      and
      (
        ne(variables['Build.SourceBranch'], 'refs/heads/release'),
        ne(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    jobs:
    - job: Build_Version_Number
      variables:
        #Pull Request version
        prpatch: $[counter(variables['system.pullrequest.pullrequestid'], 0)]
        #Develop branch version
        patch: $[counter(variables['build.sourcebranchname'], 0)]
        version: $(semver).$(patch)-$(Build.BuildID)
      steps:
        - bash: |
             echo "##vso[build.updatebuildnumber]$(major).$(minor)-PullRequest.$(prpatch)"
          condition: eq(variables['Build.Reason'], 'PullRequest')
          name: SetPRBuildName
        - bash: |
             echo "##vso[build.updatebuildnumber]$(version)"
          condition: ne(variables['Build.Reason'], 'PullRequest')
          name: SetDevelopBuildName

# Stage for building your application
  - stage:
    displayName: 'Build package'
    condition: always()

#Build for UBUntU 16
    jobs:
    - job: Build_Steps_16
      displayName: 'Build for 16.04'
      pool:
        name: DC Box Build Fabric
        demands: Agent.Name -equals 16

      steps:
      - checkout: self
        clean: true
        persistCredentials: true

      - task: Bash@3
        inputs:
          displayName: 'Build package'
          targetType: 'inline'
          script: |
            ./build.sh '$(Build.BuildNumber)' '$(Build.SourceVersionMessage)' '$(AUTHOR)' '$(EMAIL)'
            cp -f deb_dist/python3-'$(PACKAGE_NAME)'_'$(Build.BuildNumber)'_amd64.deb $(Build.ArtifactStagingDirectory)/python3-'$(PACKAGE_NAME)'_'$(Build.BuildNumber)'_16-04_amd64.deb

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'

      - script: 'rm -rf ..?* .[!.]* * ../python3-$(PACKAGE_NAME)*'
        displayName: Clean

#Build for UBUNTU 20
    - job: Build_Steps_20
      displayName: 'Build for 20.04'
      pool:
        name: DC Box Build Fabric
        demands: Agent.Name -equals 20

      steps:
      - checkout: self
        clean: true
        persistCredentials: true

      - task: Bash@3
        inputs:
          displayName: 'Build package'
          targetType: 'inline'
          script: |
            ./build.sh '$(Build.BuildNumber)' '$(Build.SourceVersionMessage)' '$(AUTHOR)' '$(EMAIL)'
            cp -f deb_dist/python3-'$(PACKAGE_NAME)'_'$(Build.BuildNumber)'_amd64.deb $(Build.ArtifactStagingDirectory)/python3-'$(PACKAGE_NAME)'_'$(Build.BuildNumber)'_20-04_amd64.deb

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'

      - script: 'rm -rf ..?* .[!.]* * ../python3-$(PACKAGE_NAME)*'
        displayName: Clean

#Build for ARM64 arch
    - job: Build_Steps_ARM
      displayName: 'Build for ARM64'
      pool:
        name: DC Box Build Fabric
        demands: Agent.Name -equals 20_arm64

      steps:
      - checkout: self
        clean: true
        persistCredentials: true

      - task: Bash@3
        inputs:
          displayName: 'Build package'
          targetType: 'inline'
          script: |
            ./build.sh '$(Build.BuildNumber)' '$(Build.SourceVersionMessage)' '$(AUTHOR)' '$(EMAIL)'
            # cp -f deb_dist/*_arm64.deb $(Build.ArtifactStagingDirectory)
            cp -f deb_dist/python3-'$(PACKAGE_NAME)'_'$(Build.BuildNumber)'_arm64.deb $(Build.ArtifactStagingDirectory)/python3-'$(PACKAGE_NAME)'_'$(Build.BuildNumber)'_20-04_arm64.deb

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'

      - script: 'rm -rf ..?* .[!.]* * ../python3-$(PACKAGE_NAME)*'
        displayName: Clean

#Build for UBUntU 24
    - job: Build_Steps_24
      displayName: 'Build for 24.04'
      pool:
        name: DC Box Build Fabric
        demands: Agent.Name -equals 24_amd64

      steps:
      - checkout: self
        clean: true
        persistCredentials: true

      - task: Bash@3
        inputs:
          displayName: 'Build package'
          targetType: 'inline'
          script: |
            ./build.sh '$(Build.BuildNumber)' '$(Build.SourceVersionMessage)' '$(AUTHOR)' '$(EMAIL)'
            cp -f deb_dist/python3-'$(PACKAGE_NAME)'_'$(Build.BuildNumber)'_amd64.deb $(Build.ArtifactStagingDirectory)/python3-'$(PACKAGE_NAME)'_'$(Build.BuildNumber)'_24-04_amd64.deb

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'

      - script: 'rm -rf ..?* .[!.]* * ../python3-$(PACKAGE_NAME)*'
        displayName: Clean


#Build and push tag
  - stage:
    displayName: 'Create build tag'
    condition: and(ne(variables['Build.Reason'], 'PullRequest'), ne(variables['branchType'], 'DEVELOP'))

    jobs:
    - job: Create_Build_Tag
      displayName: 'Create build tag'

      steps:
      - checkout: self
        clean: true
        persistCredentials: true

      - bash: |
         git tag $BuildTag
         git push origin $BuildTag

        displayName: 'Build tag'
        condition: and(ne(variables['Build.Reason'], 'PullRequest'),
          eq(variables['branchType'], 'BETA'),
          eq(variables['branchType'], 'RC'),
          eq(variables['branchType'], 'RELEASE'))
        env:
          BuildTag: $(PACKAGE_NAME)_$(Build.BuildNumber)